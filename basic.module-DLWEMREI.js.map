{
  "version": 3,
  "sources": ["angular:jit:template:file:src\\app\\admin_setting\\basic\\request_type.html", "src/app/admin_setting/basic/request_type.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\category.html", "src/app/admin_setting/basic/category.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\subcategory.html", "src/app/admin_setting/basic/subcategory.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\item.html", "src/app/admin_setting/basic/item.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\status.html", "src/app/admin_setting/basic/status.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\department.html", "src/app/admin_setting/basic/department.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\impact.html", "src/app/admin_setting/basic/impact.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\level.html", "src/app/admin_setting/basic/level.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\priority.html", "src/app/admin_setting/basic/priority.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\location.html", "src/app/admin_setting/basic/location.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\urgency.html", "src/app/admin_setting/basic/urgency.ts", "angular:jit:template:file:src\\app\\admin_setting\\basic\\notification.html", "src/app/admin_setting/basic/notification.ts", "src/app/admin_setting/basic/basic.module.ts"],
  "sourcesContent": ["\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblRequestTypeList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblRequestType'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateRequestType' : 'lblAddRequestType') | translate:service.CL\">\r\n    <form [formGroup]=\"RequestTypeForm\" (ngSubmit)=\"RequestTypeForm.valid && SaveRequestType()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !RequestTypeForm.controls.Name.valid}\">\r\n                    <label>{{'lblRequestTypeName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblRequestTypeName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">                    \r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ViewContainerRef, ElementRef } from '@angular/core';\r\nimport { Router, Event as RouterEvent, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './request_type.html'\r\n})\r\n\r\nexport class Request_TypeComponent {\r\n    isLoading = false; allItems: Array<RequestType_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblRequestTypeName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<RequestType_Model>>(\"Admin/Get_RequestType_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    RequestTypeForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.RequestTypeForm = this.fb.group({\r\n            RequestTypeID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"RequestTypeID\"];\r\n            this.EditRequestType(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditRequestType(RowItem.RequestTypeID);\r\n        }\r\n    }\r\n    async EditRequestType(RequestTypeID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<RequestType_Model>(\"Admin/Get_RequestType_ByID\", { RequestTypeID: RequestTypeID });\r\n            if (res) {\r\n                this.RequestTypeForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n\r\n    async SaveRequestType() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.RequestTypeForm.getRawValue();\r\n            obj.RequestTypeID = obj.RequestTypeID == null ? 0 : obj.RequestTypeID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.RequestTypeID != obj.RequestTypeID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.RequestTypeID != obj.RequestTypeID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/RequestType_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgRequestTypeSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgRequestTypeAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultRequestTypeSupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.RequestTypeID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/RequestType_Delete\", { RequestTypeIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgRequestTypeDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorRequestTypesUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.RequestTypeForm.controls[\"Is_Active\"].setValue(true);\r\n        this.RequestTypeForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.RequestTypeForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface RequestType_Model {\r\n    RequestTypeID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblCategoryList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblCategory'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateCategory' : 'lblAddCategory') | translate:service.CL\">\r\n    <form [formGroup]=\"CategoryForm\" (ngSubmit)=\"CategoryForm.valid && SaveCategory()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !CategoryForm.controls.Name.valid}\">\r\n                    <label>{{'lblCategoryName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblCategoryName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">                    \r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './category.html'\r\n})\r\n\r\nexport class CategoryComponent {\r\n    isLoading = false; allItems: Array<Category_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblCategoryName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Category_Model>>(\"Admin/Get_Category_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    CategoryForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.CategoryForm = this.fb.group({\r\n            CategoryID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"CategoryID\"];\r\n            this.EditCategory(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditCategory(RowItem.CategoryID);\r\n        }\r\n    }\r\n    async EditCategory(CategoryID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Category_Model>(\"Admin/Get_Category_ByID\", { CategoryID: CategoryID });\r\n            if (res) {\r\n                this.CategoryForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveCategory() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.CategoryForm.getRawValue();\r\n            obj.CategoryID = obj.CategoryID == null ? 0 : obj.CategoryID;\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.CategoryID != obj.CategoryID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.CategoryID != obj.CategoryID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Category_Update\", obj);\r\n                this.service.App.ShowLoader = false;\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgCategorySaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                this.service.App.ShowLoader = false;\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgCategoryAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultCategorySupportOnlyOne\"));\r\n                }\r\n            }\r\n\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.CategoryID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Category_Delete\", { CategoryIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgCategoryDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorCategoriesUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.CategoryForm.controls[\"Is_Active\"].setValue(true);\r\n        this.CategoryForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.CategoryForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Category_Model {\r\n    CategoryID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblSubCategoryList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblSubCategory'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateSubCategory' : 'lblAddSubCategory') | translate:service.CL\">\r\n    <form [formGroup]=\"SubCategoryForm\" (ngSubmit)=\"SubCategoryForm.valid && SaveSubCategory()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !SubCategoryForm.controls.CategoryID.valid}\">\r\n                    <label>{{'lblCategoryName'| translate:service.CL}}</label>\r\n                    <select #focus class=\"form-control\" formControlName=\"CategoryID\" autofocus>\r\n                        <option *ngFor=\"let item of CategoryList\" [value]=\"item.Value\">{{item.Key}}</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !SubCategoryForm.controls.Name.valid}\">\r\n                    <label>{{'lblSubCategoryName'| translate:service.CL}}</label>\r\n                    <input type=\"text\" class=\"form-control\" formControlName=\"Name\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblSubCategoryName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter, KeyValue } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './subcategory.html'\r\n})\r\n\r\nexport class SubCategoryComponent {\r\n    isLoading = false; allItems: Array<SubCategory_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    CategoryList: Array<KeyValue> = [];\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblSubCategoryName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblCategoryName\", ColumnName: \"CategoryName\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<SubCategory_Model>>(\"Admin/Get_SubCategory_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n\r\n            this.CategoryList = await this.service.Data.ExecuteAPI_Post<Array<KeyValue>>(\"Admin/Get_Category_List_KeyValue\");\r\n            this.CategoryList.splice(0, 0, <KeyValue>{ Key: this.service.Translator.instant(\"lblSelect\"), Value: 0 });\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    SubCategoryForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.SubCategoryForm = this.fb.group({\r\n            SubCategoryID: [0],\r\n            CategoryID: [0, Validators.compose([Validators.required, Validators.min(1)])],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"SubCategoryID\"];\r\n            this.EditSubCategory(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditSubCategory(RowItem.SubCategoryID);\r\n        }\r\n    }\r\n    async EditSubCategory(SubCategoryID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<SubCategory_Model>(\"Admin/Get_SubCategory_ByID\", { SubCategoryID: SubCategoryID });\r\n            if (res) {\r\n                this.SubCategoryForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveSubCategory() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.SubCategoryForm.getRawValue();\r\n            obj.SubCategoryID = obj.SubCategoryID == null ? 0 : obj.SubCategoryID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.SubCategoryID != obj.SubCategoryID && d.CategoryID == obj.CategoryID);//check name exists or not                \r\n            if (index < 0) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/SubCategory_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgSubCategorySaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgSubCategoryAlreadyExists\"));\r\n                }\r\n            }\r\n\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.SubCategoryID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/SubCategory_Delete\", { SubCategoryIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgSubCategoryDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorSubCategorysUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.SubCategoryForm.controls[\"CategoryID\"].setValue(0);\r\n        this.SubCategoryForm.controls[\"Is_Active\"].setValue(true);\r\n        this.SubCategoryForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface SubCategory_Model {\r\n    SubCategoryID: number;\r\n    CategoryID: number;\r\n    Name: string;\r\n    CategoryName: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblItemList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblItem'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateItem' : 'lblAddItem') | translate:service.CL\">\r\n    <form [formGroup]=\"ItemForm\" (ngSubmit)=\"ItemForm.valid && SaveItem()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !ItemForm.controls.SubCategoryID.valid}\">\r\n                    <label>{{'lblSubCategoryName'| translate:service.CL}}</label>\r\n                    <select #focus class=\"form-control\" formControlName=\"SubCategoryID\" autofocus>\r\n                        <option *ngFor=\"let item of SubCategoryList\" [value]=\"item.Value\">{{item.Key}}</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !ItemForm.controls.Name.valid}\">\r\n                    <label>{{'lblItemName'| translate:service.CL}}</label>\r\n                    <input type=\"text\" class=\"form-control\" formControlName=\"Name\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblItemName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <!--<label>Is Active</label>-->\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter, KeyValue } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './item.html'\r\n})\r\n\r\nexport class ItemComponent {\r\n    isLoading = false; allItems: Array<Item_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    SubCategoryList: Array<KeyValue> = [];\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblItemName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblCategorySubCategory\", ColumnName: \"SubCategoryName\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Item_Model>>(\"Admin/Get_Item_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n\r\n            this.SubCategoryList = await this.service.Data.ExecuteAPI_Post<Array<KeyValue>>(\"Admin/Get_SubCategory_List_KeyValue\");\r\n            this.SubCategoryList.splice(0, 0, <KeyValue>{ Key: this.service.Translator.instant(\"lblSelect\"), Value: 0 });\r\n\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    ItemForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.ItemForm = this.fb.group({\r\n            ItemID: [0],\r\n            SubCategoryID: [0, Validators.compose([Validators.required, Validators.min(1)])],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"ItemID\"];\r\n            this.EditItem(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditItem(RowItem.ItemID);\r\n        }\r\n    }\r\n    async EditItem(ItemID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Item_Model>(\"Admin/Get_Item_ByID\", { ItemID: ItemID });\r\n            if (res) {\r\n                this.ItemForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveItem() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.ItemForm.getRawValue();\r\n            obj.ItemID = obj.ItemID == null ? 0 : obj.ItemID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.ItemID != obj.ItemID && d.SubCategoryID == obj.SubCategoryID);//check name exists or not                \r\n            if (index < 0) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Item_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgItemSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgItemAlreadyExists\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.ItemID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Item_Delete\", { ItemIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgItemDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorItemsUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.ItemForm.controls[\"SubCategoryID\"].setValue(0);\r\n        this.ItemForm.controls[\"Is_Active\"].setValue(true);\r\n        this.ItemForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Item_Model {\r\n    ItemID: number;\r\n    CategoryID: number;\r\n    SubCategoryID: number;\r\n    Name: string;\r\n    SubCategoryName: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblStatusList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblStatus'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>    \r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateStatus' : 'lblAddStatus') | translate:service.CL\">\r\n    <form [formGroup]=\"StatusForm\" (ngSubmit)=\"StatusForm.valid && SaveStatus()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 col-md-6 form-group\" [ngClass]=\"{'has-error': f.submitted && !StatusForm.controls.Name.valid}\">\r\n                    <label>{{'lblStatusName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblStatusName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 col-md-6 form-group\">\r\n                    <label>{{'lblStatusType'| translate:service.CL}}</label>\r\n                    <select class=\"form-control\" formControlName=\"Is_Closed\">\r\n                        <option value=\"0\">Open</option>\r\n                        <option value=\"1\">Closed</option>\r\n                        <!--<option value=\"2\">On Hold</option>-->\r\n                    </select>\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './status.html'\r\n})\r\n\r\nexport class StatusComponent {\r\n    isLoading = false; allItems: Array<Status_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblStatusName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblStatusType\", ColumnName: \"StatusType\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Status_Model>>(\"Admin/Get_Status_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    StatusForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.StatusForm = this.fb.group({\r\n            StatusID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Closed: [0],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"StatusID\"];\r\n            this.EditStatus(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditStatus(RowItem.StatusID);\r\n        }\r\n    }\r\n    async EditStatus(StatusID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Status_Model>(\"Admin/Get_Status_ByID\", { StatusID: StatusID });\r\n            if (res) {\r\n                this.StatusForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveStatus() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.StatusForm.getRawValue();\r\n            obj.StatusID = obj.StatusID == null ? 0 : obj.StatusID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.StatusID != obj.StatusID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.StatusID != obj.StatusID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Status_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgStatusSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgStatusAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultStatusSupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.StatusID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Status_Delete\", { StatusIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgStatusDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorStatusUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.StatusForm.controls[\"Is_Active\"].setValue(true);\r\n        this.StatusForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.StatusForm.controls[\"Is_Default\"].setValue(false);\r\n        this.StatusForm.controls[\"Is_Closed\"].setValue(0);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Status_Model {\r\n    StatusID: number;\r\n    Name: string;\r\n    Description: string;\r\n    StatusType: string;\r\n    Is_Closed: number;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblDepartmentList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblDepartment'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateDepartment' : 'lblAddDepartment') | translate:service.CL\">\r\n    <form [formGroup]=\"DepartmentForm\" (ngSubmit)=\"DepartmentForm.valid && SaveDepartment()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !DepartmentForm.controls.Name.valid}\">\r\n                    <label>{{'lblDepartmentName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDepartmentName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './department.html'\r\n})\r\n\r\nexport class DepartmentComponent {\r\n    isLoading = false; allItems: Array<Department_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDepartmentName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Department_Model>>(\"Admin/Get_Department_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    DepartmentForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.DepartmentForm = this.fb.group({\r\n            DepartmentID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"DepartmentID\"];\r\n            this.EditDepartment(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditDepartment(RowItem.DepartmentID);\r\n        }\r\n    }\r\n    async EditDepartment(DepartmentID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Department_Model>(\"Admin/Get_Department_ByID\", { DepartmentID: DepartmentID });\r\n            if (res) {\r\n                this.DepartmentForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveDepartment() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.DepartmentForm.getRawValue();\r\n            obj.DepartmentID = obj.DepartmentID == null ? 0 : obj.DepartmentID;\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.DepartmentID != obj.DepartmentID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.DepartmentID != obj.DepartmentID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Department_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgDepartmentSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDepartmentAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultDepartmentSupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.DepartmentID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Department_Delete\", { DepartmentIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgDepartmentDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorDepartmentsUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.DepartmentForm.controls[\"Is_Active\"].setValue(true);\r\n        this.DepartmentForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.DepartmentForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Department_Model {\r\n    DepartmentID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblImpactList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblImpact'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateImpact' : 'lblAddImpact') | translate:service.CL\">\r\n    <form [formGroup]=\"ImpactForm\" (ngSubmit)=\"ImpactForm.valid && SaveImpact()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !ImpactForm.controls.Name.valid}\">\r\n                    <label>{{'lblImpactName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblImpactName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ViewContainerRef, ElementRef } from '@angular/core';\r\nimport { Router, Event as RouterEvent, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './impact.html'\r\n})\r\n\r\nexport class ImpactComponent {\r\n    isLoading = false; allItems: Array<Impact_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblImpactName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Impact_Model>>(\"Admin/Get_Impact_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    ImpactForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.ImpactForm = this.fb.group({\r\n            ImpactID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"ImpactID\"];\r\n            this.EditImpact(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditImpact(RowItem.ImpactID);\r\n        }\r\n    }\r\n    async EditImpact(ImpactID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Impact_Model>(\"Admin/Get_Impact_ByID\", { ImpactID: ImpactID });\r\n            if (res) {\r\n                this.ImpactForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveImpact() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.ImpactForm.getRawValue();\r\n            obj.ImpactID = obj.ImpactID == null ? 0 : obj.ImpactID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.ImpactID != obj.ImpactID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.ImpactID != obj.ImpactID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Impact_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgImpactSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgImpactAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultImpactSupportOnlyOne\"));\r\n                }\r\n            }\r\n\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.ImpactID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Impact_Delete\", { ImpactIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgImpactDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorImpactsUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.ImpactForm.controls[\"Is_Active\"].setValue(true);\r\n        this.ImpactForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.ImpactForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Impact_Model {\r\n    ImpactID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblLevelList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblLevel'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateLevel' : 'lblAddLevel') | translate:service.CL\">\r\n    <form [formGroup]=\"LevelForm\" (ngSubmit)=\"LevelForm.valid && SaveLevel()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !LevelForm.controls.Name.valid}\">\r\n                    <label>{{'lblLevelName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblLevelName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './level.html'\r\n})\r\n\r\nexport class LevelComponent {\r\n    isLoading = false; allItems: Array<Level_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblLevelName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Level_Model>>(\"Admin/Get_Level_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    LevelForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.LevelForm = this.fb.group({\r\n            LevelID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"LevelID\"];\r\n            this.EditLevel(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditLevel(RowItem.LevelID);\r\n        }\r\n    }\r\n    async EditLevel(LevelID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Level_Model>(\"Admin/Get_Level_ByID\", { LevelID: LevelID });\r\n            if (res) {\r\n                this.LevelForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveLevel() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.LevelForm.getRawValue();\r\n            obj.LevelID = obj.LevelID == null ? 0 : obj.LevelID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.LevelID != obj.LevelID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.LevelID != obj.LevelID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Level_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgLevelSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgLevelAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultLevelSupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.LevelID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Level_Delete\", { LevelIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgLevelDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorLevelsUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.LevelForm.controls[\"Is_Active\"].setValue(true);\r\n        this.LevelForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Level_Model {\r\n    LevelID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblPriorityList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblPriority'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdatePriority' : 'lblAddPriority') | translate:service.CL\">\r\n    <form [formGroup]=\"PriorityForm\" (ngSubmit)=\"PriorityForm.valid && SavePriority()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 col-md-6 form-group\" [ngClass]=\"{'has-error': f.submitted && !PriorityForm.controls.Name.valid}\">\r\n                    <label>{{'lblPriorityName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" placeholder=\"Enter Priority Name\" />\r\n                </div>\r\n                <div class=\"col-12 col-md-6 form-group\">\r\n                    <label>{{'lblColor'| translate:service.CL}}</label>\r\n                    <span class=\"clrBox float-right\" [style.background]=\"Color\"></span>\r\n                    <input type=\"text\" [(colorPicker)]=\"Color\" [cpOutputFormat]=\"'hex'\" [value]=\"Color\" [cpPosition]=\"'bottom'\" class=\"form-control\" formControlName=\"Color\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblColor'| translate:service.CL}}\" />                   \r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './priority.html'\r\n})\r\n\r\nexport class PriorityComponent {\r\n    isLoading = false; allItems: Array<Priority_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false; Color: string;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblPriorityName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblColor\", ColumnName: \"Color\", Condition: \"no\", Type: \"color\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Priority_Model>>(\"Admin/Get_Priority_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    PriorityForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.PriorityForm = this.fb.group({\r\n            PriorityID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Color: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"PriorityID\"];\r\n            this.EditPriority(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditPriority(RowItem.PriorityID);\r\n        }\r\n    }\r\n    async EditPriority(PriorityID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Priority_Model>(\"Admin/Get_Priority_ByID\", { PriorityID: PriorityID });\r\n            if (res) {\r\n                this.PriorityForm.patchValue(res);\r\n                this.Color = res.Color ? res.Color : \"\";\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SavePriority() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.PriorityForm.getRawValue();\r\n            obj.PriorityID = obj.PriorityID == null ? 0 : obj.PriorityID;\r\n            if (this.Color) { obj.Color = this.Color; }\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.PriorityID != obj.PriorityID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.PriorityID != obj.PriorityID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Priority_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgPrioritySaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgPriorityAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultPrioritySupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.PriorityID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Priority_Delete\", { PriorityIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgPriorityDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorPrioritiesUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.PriorityForm.controls[\"Is_Active\"].setValue(true);\r\n        this.PriorityForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.PriorityForm.controls[\"Is_Default\"].setValue(false);\r\n        this.PriorityForm.controls[\"Color\"].setValue(\"\");\r\n        this.Color = \"\";\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Priority_Model {\r\n    PriorityID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Color: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblLocationList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblLocation'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">                        \r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateLocation' : 'lblAddLocation') | translate:service.CL\">\r\n    <form [formGroup]=\"LocationForm\" (ngSubmit)=\"LocationForm.valid && SaveLocation()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !LocationForm.controls.Name.valid}\">\r\n                    <label>{{'lblLocationName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblLocationName'| translate:service.CL}}\"/>\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">                  \r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ViewContainerRef, ElementRef } from '@angular/core';\r\nimport { Router, Event as RouterEvent, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './location.html'\r\n})\r\n\r\nexport class LocationComponent {\r\n    isLoading = false; allItems: Array<Location_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblLocationName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Location_Model>>(\"Admin/Get_Location_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    LocationForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.LocationForm = this.fb.group({\r\n            LocationID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"LocationID\"];\r\n            this.EditLocation(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditLocation(RowItem.LocationID);\r\n        }\r\n    }\r\n    async EditLocation(LocationID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Location_Model>(\"Admin/Get_Location_ByID\", { LocationID: LocationID });\r\n            if (res) {\r\n                this.LocationForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveLocation() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.LocationForm.getRawValue();\r\n            obj.LocationID = obj.LocationID == null ? 0 : obj.LocationID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.LocationID != obj.LocationID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.LocationID != obj.LocationID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Location_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgLocationSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgLocationAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultLocationSupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.LocationID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Location_Delete\", { LocationIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgLocationDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorLocationsUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.LocationForm.controls[\"Is_Active\"].setValue(true);\r\n        this.LocationForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.LocationForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Location_Model {\r\n    LocationID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblUrgencyList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblUrgency'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"(isEdit ? 'lblUpdateUrgency' : 'lblAddUrgency') | translate:service.CL\">\r\n    <form [formGroup]=\"UrgencyForm\" (ngSubmit)=\"UrgencyForm.valid && SaveUrgency()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !UrgencyForm.controls.Name.valid}\">\r\n                    <label>{{'lblUrgencyName'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Name\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblUrgencyName'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Default\" type=\"checkbox\" formControlName=\"Is_Default\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Default\">{{'lblIsDefault'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './urgency.html'\r\n})\r\n\r\nexport class UrgencyComponent {\r\n    isLoading = false; allItems: Array<Urgency_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblUrgencyName\", ColumnName: \"Name\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblDescription\", ColumnName: \"Description\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsDefault\", ColumnName: \"Is_Default\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Urgency_Model>>(\"Admin/Get_Urgency_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    UrgencyForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.UrgencyForm = this.fb.group({\r\n            UrgencyID: [0],\r\n            Name: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Default: [false],\r\n            Is_Client_Visible: [true]\r\n        });\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"UrgencyID\"];\r\n            this.EditUrgency(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditUrgency(RowItem.UrgencyID);\r\n        }\r\n    }\r\n    async EditUrgency(UrgencyID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Urgency_Model>(\"Admin/Get_Urgency_ByID\", { UrgencyID: UrgencyID });\r\n            if (res) {\r\n                this.UrgencyForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveUrgency() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.UrgencyForm.getRawValue();\r\n            obj.UrgencyID = obj.UrgencyID == null ? 0 : obj.UrgencyID;\r\n\r\n            let index = this.allItems.findIndex(d => d.Name == obj.Name && d.UrgencyID != obj.UrgencyID);//check name exists or not        \r\n            let default_index = this.allItems.findIndex(d => d.Is_Default && d.UrgencyID != obj.UrgencyID);//check any other is default.               \r\n            if (index < 0 && (default_index < 0 || !obj.Is_Default)) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Urgency_Update\", obj);\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgUrgencySaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgUrgencyAlreadyExists\"));\r\n                }\r\n                else if (default_index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgDefaultUrgencySupportOnlyOne\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.UrgencyID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Urgency_Delete\", { UrgencyIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgUrgencyDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgErrorUrgencysUsedInAnotherTable\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.UrgencyForm.controls[\"Is_Active\"].setValue(true);\r\n        this.UrgencyForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.UrgencyForm.controls[\"Is_Default\"].setValue(false);\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Urgency_Model {\r\n    UrgencyID: number;\r\n    Name: string;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Default: boolean;\r\n    Is_Client_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblNotificationList'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblNotification'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"table-header\">\r\n                            <div>\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" title=\"{{'tlpRefresh'| translate:service.CL}}\" (click)=\"txtSearch='';refreshGrid();\"><i class=\"fa fa-sync\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Add_Admin\" (click)=\"AddRow()\" class=\"btn btn-sm btn-warning\" title=\"{{'tlpAddNew'| translate:service.CL}}\"><i class=\"fa fa-plus\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Edit_Admin\" (click)=\"EditRow()\" class=\"btn btn-sm btn-primary\" title=\"{{'tlpEdit'| translate:service.CL}}\"><i class=\"fa fa-pencil-alt\"></i></button>\r\n                                <button type=\"button\" *ngIf=\"service?.Account?.Is_Delete_Admin\" (click)=\"DeleteRow()\" class=\"btn btn-sm btn-danger\" title=\"{{'tlpDelete'| translate:service.CL}}\"><i class=\"fa fa-trash\"></i></button>\r\n                            </div>\r\n                            <div class=\"table-filter\">\r\n                                <input type=\"text\" *ngIf=\"service?.Account?.Is_Admin_Search\" class=\"form-control form-control-sm\" name=\"filter\" placeholder=\"{{'phSearch'| translate:service.CL}}\" [(ngModel)]=\"txtSearch\" (keyup)=\"service.App.searchFilter.emit($event.target.value);\">\r\n                                <div class=\"dropdown dropleft\" *ngIf=\"service?.Account?.Is_ColumnChooser_Visible\">\r\n                                    <button class=\"btn btn-sm btn-secondary\" data-toggle=\"dropdown\" title=\"{{'tlpColumnChooser'| translate:service.CL}}\" type=\"button\">\r\n                                        <i class=\"fa fa-cog\"></i>\r\n                                    </button>\r\n                                    <ul class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\r\n                                        <li *ngFor=\"let filter of gridFilter;let i = index;\" class=\"dropdown-item\">\r\n                                            <div class=\"custom-control custom-checkbox\">\r\n                                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"chkfltr-{{i}}\" [(ngModel)]=\"filter.Is_Visible\" (change)=\"filter.Is_Visible != $event.target.value;\">\r\n                                                <label class=\"custom-control-label\" for=\"chkfltr-{{i}}\">\r\n                                                    <span>{{filter.DisplayText | translate:service.CL}}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"position:relative;\">\r\n                            <commongrid *ngIf=\"allItems.length > 0\" [records]=\"allItems\" [gridfilter]=\"gridFilter\" [SearchText]=\"txtSearch\"\r\n                                        [pagesize]=\"10\" (change)=\"pageChanged($event)\" [ShowSorting]=\"true\"\r\n                                        [PagingType]=\"'nextprevnumberadvanced'\" [ShowPagesize]=\"true\" [ShowFilter]=\"true\" [ShowCheckbox]=\"true\"\r\n                                        [Edit]=\"true\" (EditRow)=\"service?.Account?.Is_EditRow_On_DoubleClick && EditRowDBClick($event)\">\r\n                            </commongrid>\r\n\r\n                            <div class=\"nodata\" *ngIf=\"!isLoading && allItems.length == 0\">\r\n                                <span>{{'lblNoData'| translate:service.CL}}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"isLoading\" class=\"overlay-inner\">\r\n                            <i class=\"fa fa-circle-notch fa-spin\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<modal-dialog #modalAdd [backDrop]=\"false\" modalClass=\"modal-md\" [modalHeader]=\"isEdit ? 'Update Notification' : 'Add Notification' \">\r\n    <form [formGroup]=\"NotificationForm\" (ngSubmit)=\"NotificationForm.valid && SaveNotification()\" #f=\"ngForm\" novalidate>\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-box row\">\r\n                <div class=\"col-12 form-group\" [ngClass]=\"{'has-error': f.submitted && !NotificationForm.controls.Subject.valid}\">\r\n                    <label>{{'lblSubject'| translate:service.CL}}</label>\r\n                    <input #focus type=\"text\" class=\"form-control\" formControlName=\"Subject\" autofocus placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblSubject'| translate:service.CL}}\" />\r\n                </div>\r\n                <div class=\"col-12 form-group\">\r\n                    <label>{{'lblDescription'| translate:service.CL}}</label>\r\n                    <textarea class=\"form-control kendoEditor\" formControlName=\"Description\" placeholder=\"{{'lblEnter'| translate:service.CL}} {{'lblDescription'| translate:service.CL}}\"></textarea>\r\n                </div>\r\n\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\" [ngClass]=\"{'has-error': f.submitted && !NotificationForm.controls.StartDate.valid}\">\r\n                    <label>{{'lblStartDate'| translate:service.CL}}</label>\r\n                    <div class=\"input-group datepicker\">\r\n                        <ng2-flatpickr #stDate [config]=\"dtStart_Config\" altInputClass=\"form-control\"></ng2-flatpickr>\r\n                        <div class=\"input-group-append\">\r\n                            <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"service?.OpenFlatpickr(stDate)\"><i class=\"fa fa-calendar\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\" [ngClass]=\"{'has-error': f.submitted && !NotificationForm.controls.EndDate.valid}\">\r\n                    <label>{{'lblEndDate'| translate:service.CL}}</label>\r\n                    <div class=\"input-group datepicker\">\r\n                        <ng2-flatpickr #edDate [config]=\"dtEnd_Config\" altInputClass=\"form-control\"></ng2-flatpickr>\r\n                        <div class=\"input-group-append\">\r\n                            <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"service?.OpenFlatpickr(edDate)\"><i class=\"fa fa-calendar\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-6 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Client_Visible\" type=\"checkbox\" formControlName=\"Is_Client_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Client_Visible\">{{'lblIsClientVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-6 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Agent_Visible\" type=\"checkbox\" formControlName=\"Is_Agent_Visible\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Agent_Visible\">{{'lblIsAgentVisible'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input id=\"frmIs_Active\" type=\"checkbox\" formControlName=\"Is_Active\" class=\"custom-control-input\">\r\n                        <label class=\"custom-control-label\" for=\"frmIs_Active\">{{'lblIsActive'| translate:service.CL}}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer form-btn\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-teal\" (click)=\"Is_SaveAndAddNew = true;\"><i class=\"fa fa-save mr-1\"></i><span class=\"save-plus\"><i class=\"fa fa-plus\"></i></span> {{'btnSaveAndNew'| translate:service.CL}}</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"modalAdd.close()\"><i class=\"fa fa-times\"></i> {{'btnCancel'| translate:service.CL}}</button>\r\n        </div>\r\n    </form>\r\n</modal-dialog>", "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { GridFilter } from '../../shared/common_model';\r\nimport { ModalDialog } from '../../shared/modal.dialog';\r\nimport { AlertType } from '../../shared/common_model';\r\nimport { FlatpickrOptions } from 'ng2-flatpickr';\r\n\r\ndeclare var $: JQueryStatic;\r\n\r\n@Component({\r\n    templateUrl: './notification.html'\r\n})\r\n\r\nexport class NotificationComponent {\r\n    isLoading = false; allItems: Array<Notification_Model> = []; txtSearch = \"\";\r\n    totalitems: number; gridFilter: Array<GridFilter> = [];\r\n    Is_SaveAndAddNew: boolean = false;\r\n    minStDate; minEndDate;\r\n\r\n    dtStart_Config: FlatpickrOptions = this.service.CommonDateConfig(); dtEnd_Config: FlatpickrOptions = this.service.CommonDateConfig();\r\n    @ViewChild('stDate') stDate; @ViewChild('edDate') edDate;\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblSubject\", ColumnName: \"Subject\", Condition: \"no\", Type: \"string\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblStartDate\", ColumnName: \"StartDate\", Condition: \"no\", Type: \"date\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblEndDate\", ColumnName: \"EndDate\", Condition: \"no\", Type: \"date\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsActive\", ColumnName: \"Is_Active\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsClientVisible\", ColumnName: \"Is_Client_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n        this.gridFilter.push(<GridFilter>{ DisplayText: \"lblIsAgentVisible\", ColumnName: \"Is_Agent_Visible\", Condition: \"no\", Type: \"bool\", Value: \"\", Is_Visible: true });\r\n\r\n        let cdt = new Date(); cdt.setDate(cdt.getDate() + 1);\r\n        this.minStDate = this.service.Date_Format(new Date(), \"yyyy-MM-dd\");\r\n        this.minEndDate = this.service.Date_Format(cdt, \"yyyy-MM-dd\");\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.setKendoEditor(\".kendoEditor\");//initialize kendo editor\r\n    }\r\n    SetDateOptions() {\r\n        this.Set_StartDate(this.minStDate);\r\n        this.stDate.flatpickr.set(\"onChange\", (dtarr, dt, instance) => {\r\n            this.NotificationForm.controls['StartDate'].setValue(dt);\r\n\r\n            let cdt: any = new Date(dt); cdt.setDate(cdt.getDate() + 1);\r\n            this.Set_EndDate(this.service.Date_Format(cdt, \"yyyy-MM-dd\"), dt);\r\n        });\r\n\r\n        this.Set_EndDate(this.minEndDate, this.minStDate);\r\n        this.edDate.flatpickr.set(\"onChange\", (dtarr, dt, instance) => {\r\n            this.NotificationForm.controls['EndDate'].setValue(dt);\r\n        });\r\n    }\r\n    Set_StartDate(dt: any) {\r\n        this.stDate.flatpickr.set(\"minDate\", dt); this.stDate.flatpickr.setDate(dt);\r\n        this.NotificationForm.controls['StartDate'].setValue(dt);\r\n    }\r\n    Set_EndDate(dt: any, minDt: any) {\r\n        this.edDate.flatpickr.set(\"minDate\", minDt); this.edDate.flatpickr.setDate(dt);\r\n        this.NotificationForm.controls['EndDate'].setValue(dt);\r\n    }\r\n\r\n    async bindData(isRefresh = false) {\r\n        try {\r\n            this.isLoading = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<Array<Notification_Model>>(\"Admin/Get_Notification_List\");\r\n            if (res) {\r\n                this.allItems = res;\r\n                this.totalitems = res.length;\r\n\r\n                if (isRefresh) { this.service.App.refreshGrid.emit(); }\r\n            }\r\n            this.isLoading = false;\r\n        } catch (e) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n    pageChanged(obj: any) { }\r\n\r\n    //Add/Edit \r\n    NotificationForm: UntypedFormGroup; isEdit = false;\r\n    @ViewChild('f') form: NgForm;\r\n    @ViewChild(\"modalAdd\") modalAdd: ModalDialog;\r\n    initForm() {\r\n        this.NotificationForm = this.fb.group({\r\n            NotificationID: [0],\r\n            Subject: [\"\", Validators.required],\r\n            StartDate: [\"\", Validators.required],\r\n            EndDate: [\"\", Validators.required],\r\n            Description: [\"\"],\r\n            Is_Active: [true],\r\n            Is_Client_Visible: [true],\r\n            Is_Agent_Visible: [true]\r\n        });\r\n\r\n        window.setTimeout(() => { this.SetDateOptions(); }, 10);//Date Configs\r\n    }\r\n    AddRow() {\r\n        this.isEdit = false;\r\n        this.clearForm();\r\n        this.modalAdd.open();\r\n        this.Focus_Element();\r\n\r\n        //kendo oeditor refresh when editor in popup\r\n        this.refreshKendoEditor(\".kendoEditor\");\r\n        this.setKendoEditorValue(\".kendoEditor\", \"\");\r\n\r\n        this.Set_StartDate(this.minStDate); this.Set_EndDate(this.minEndDate, this.minStDate);\r\n    }\r\n    EditRow() {\r\n        this.isEdit = true;\r\n        let selectedRow = this.allItems.filter((x) => x.selectedRow);\r\n        if (selectedRow.length == 0) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n        }\r\n        else if (selectedRow.length > 1) {\r\n            this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectOnlyOneRow\"));\r\n        }\r\n        else {\r\n            let ID = selectedRow[0][\"NotificationID\"];\r\n            this.EditNotification(ID);\r\n        }\r\n    }\r\n    EditRowDBClick(RowItem: any) {\r\n        this.isEdit = true;\r\n        if (!RowItem.isTrusted && RowItem) {\r\n            this.EditNotification(RowItem.NotificationID);\r\n        }\r\n    }\r\n    async EditNotification(NotificationID) {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<Notification_Model>(\"Admin/Get_Notification_ByID\", { NotificationID: NotificationID });\r\n            if (res) {\r\n                this.NotificationForm.patchValue(res);\r\n            }\r\n            this.modalAdd.open();\r\n            this.Focus_Element();\r\n\r\n            //kendo oeditor refresh when editor in popup\r\n            this.refreshKendoEditor(\".kendoEditor\");\r\n            this.setKendoEditorValue(\".kendoEditor\", res.Description);\r\n            if (res) {\r\n                window.setTimeout(() => {//Set dates\r\n                    let stdt = this.service.Date_Format(res.StartDate, \"yyyy-MM-dd\");\r\n                    let enddt = this.service.Date_Format(res.EndDate, \"yyyy-MM-dd\");\r\n                    this.Set_StartDate(stdt); this.Set_EndDate(enddt, stdt);\r\n                }, 60);\r\n            }\r\n        } catch (e) {\r\n            this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n        }\r\n    }\r\n\r\n    async SaveNotification() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n\r\n            let obj = this.NotificationForm.getRawValue();\r\n            obj.NotificationID = obj.NotificationID == null ? 0 : obj.NotificationID;\r\n            obj.Description = $(\".kendoEditor\").data(\"kendoEditor\").value();\r\n\r\n            let index = this.allItems.findIndex(d => d.Subject == obj.Subject && d.NotificationID != obj.NotificationID);//check subject exists or not                \r\n            if (index < 0) {\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Notification_Update\", obj);\r\n                this.service.App.ShowLoader = false;\r\n                if (res > 0) {\r\n                    if (!this.Is_SaveAndAddNew) { this.modalAdd.close(); }\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgNotificationSaved\"));\r\n                    this.clearForm();\r\n                    this.refreshGrid();\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n            }\r\n            else {\r\n                if (index > -1) {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgNotificationSubjectAlreadyExists\"));\r\n                }\r\n            }\r\n            this.Is_SaveAndAddNew = false;\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n    async DeleteRow() {\r\n        try {\r\n            let selectedRow = this.allItems.filter((x) => x.selectedRow).map(d => d.NotificationID).join();\r\n            if (selectedRow.length == 0) {\r\n                this.service.showMessage(AlertType.Warning, this.service.Translator.instant(\"msgSelectRow\"));\r\n            } else {\r\n                if (confirm(this.service.Translator.instant(\"msgDeleteSelectedItems\"))) {\r\n                    this.service.App.ShowLoader = true;\r\n                    let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Notification_Delete\", { NotificationIDs: selectedRow });\r\n                    if (res > 0) {\r\n                        this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgNotificationDeleted\"));\r\n                        this.refreshGrid();\r\n                    }\r\n                    else {\r\n                        this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                    }\r\n                    this.service.App.ShowLoader = false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    clearForm() {\r\n        this.Is_SaveAndAddNew = false;\r\n        this.form.resetForm();\r\n        this.NotificationForm.controls[\"Is_Active\"].setValue(true);\r\n        this.NotificationForm.controls[\"Is_Client_Visible\"].setValue(true);\r\n        this.NotificationForm.controls[\"Is_Agent_Visible\"].setValue(true);\r\n        this.setKendoEditorValue('.kendoEditor', '');\r\n    }\r\n    refreshGrid() {\r\n        this.bindData(true);\r\n    }\r\n\r\n    //Kendo Editor Set, Refresh and Get Value\r\n    setKendoEditor(id) {\r\n        window.setTimeout(() => {\r\n            $(id)[\"kendoEditor\"]({\r\n                tools: [\r\n                    \"formatting\",\r\n                    \"bold\",\r\n                    \"italic\",\r\n                    \"underline\",\r\n                    \"strikethrough\",\r\n                    \"justifyLeft\",\r\n                    \"justifyCenter\",\r\n                    \"justifyRight\",\r\n                    \"justifyFull\",\r\n                    \"insertUnorderedList\",\r\n                    \"insertOrderedList\",\r\n                    \"createLink\",\r\n                    \"unlink\",\r\n                    \"insertImage\",\r\n                    \"viewHtml\",\r\n                    \"foreColor\",\r\n                    \"backColor\",\r\n                    \"fontName\",\r\n                    \"fontSize\"\r\n                ]\r\n            });\r\n        }, 200);\r\n    }\r\n    refreshKendoEditor(id) {\r\n        $(id).data(\"kendoEditor\").refresh();\r\n    }\r\n    setKendoEditorValue(id, value) {\r\n        $(id).data(\"kendoEditor\").value(value);\r\n    }\r\n    getKendoEditorValue(id) {\r\n        $(id).data(\"kendoEditor\").value();\r\n    }\r\n\r\n    @ViewChild('focus') inpfocus: ElementRef;\r\n    Focus_Element() {\r\n        window.setTimeout(() => { this.inpfocus.nativeElement.focus(); }, 50);\r\n    }\r\n}\r\n\r\ninterface Notification_Model {\r\n    NotificationID: number;\r\n    Subject: string;\r\n    StartDate: Date;\r\n    EndDate: Date;\r\n    Description: string;\r\n    Is_Active: boolean;\r\n    Is_Client_Visible: boolean;\r\n    Is_Agent_Visible: boolean;\r\n    CreatedDate: Date;\r\n    selectedRow: boolean;\r\n}", "\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule, UpperCasePipe } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\nimport { Request_TypeComponent } from './request_type';\r\nimport { CategoryComponent } from './category';\r\nimport { SubCategoryComponent } from './subcategory';\r\nimport { ItemComponent } from './item';\r\nimport { StatusComponent } from './status';\r\nimport { DepartmentComponent } from './department';\r\nimport { ImpactComponent } from './impact';\r\nimport { LevelComponent } from './level';\r\n\r\nimport { PriorityComponent } from './priority';\r\nimport { LocationComponent } from './location';\r\nimport { UrgencyComponent } from './urgency';\r\nimport { NotificationComponent } from './notification';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n    { path: 'request_type', component: Request_TypeComponent },\r\n    { path: 'category', component: CategoryComponent },\r\n    { path: 'subcategory', component: SubCategoryComponent },\r\n    { path: 'item', component: ItemComponent },\r\n    { path: 'status', component: StatusComponent },\r\n    { path: 'department', component: DepartmentComponent },\r\n    { path: 'impact', component: ImpactComponent },\r\n    { path: 'level', component: LevelComponent },\r\n    { path: 'priority', component: PriorityComponent },\r\n    { path: 'location', component: LocationComponent },\r\n    { path: 'urgency', component: UrgencyComponent },\r\n    { path: 'notification', component: NotificationComponent },\r\n\r\n];\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes), CommonModule, SharedModule],\r\n    declarations: [Request_TypeComponent,CategoryComponent, SubCategoryComponent, ItemComponent, StatusComponent, DepartmentComponent, ImpactComponent, LevelComponent, PriorityComponent,\r\n        LocationComponent, UrgencyComponent, NotificationComponent],\r\n\r\n})\r\n\r\nexport class BasicModule {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
  "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",
  "names": ["Request_TypeComponent", "CategoryComponent", "SubCategoryComponent", "ItemComponent", "StatusComponent", "DepartmentComponent", "ImpactComponent", "LevelComponent", "PriorityComponent", "LocationComponent", "UrgencyComponent", "NotificationComponent", "BasicModule"]
}
