{
  "version": 3,
  "sources": ["src/app/auth.guard.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { SystemService } from './shared/SystemService';\r\n\r\n@Injectable()\r\nexport class AuthGuard  {\r\n    public defered = new Deferred<boolean>();\r\n    public lastURL: string;\r\n    constructor(public router: Router, public service: SystemService) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\r\n        this.defered = new Deferred<boolean>();\r\n        this.lastURL = state.url;\r\n        this.service.HasAccountData.then(() => {\r\n            window.setTimeout(() => {\r\n                if (this.service.App.getCookie(\"Bearer\") && this.service.Account.UserID > 0) {                   \r\n                    if (route.data.pageProp) {                        \r\n                        if (this.service.Account[route.data.pageProp] || route.data.type) {\r\n                            this.defered.resolve(true);\r\n                        } else {\r\n                            this.defered.resolve(false);\r\n                        }\r\n                    } else {\r\n                        this.defered.resolve(true);\r\n                    }\r\n                }\r\n                else {\r\n                    this.defered.resolve(false);\r\n                    this.service.redirectToLogin(this.lastURL);\r\n                }\r\n            }, 10);\r\n        }, () => {\r\n            this.defered.resolve(false);\r\n            this.service.redirectToLogin(this.lastURL);\r\n        });\r\n        return this.defered.promise;\r\n    }\r\n}\r\n\r\nclass Deferred<T> {\r\n\r\n    promise: Promise<T>;\r\n    resolve: (value?: T | PromiseLike<T>) => void;\r\n    reject: (reason?: any) => void;\r\n\r\n    constructor() {\r\n        this.promise = new Promise<T>((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n}"],
  "mappings": ";;;;;;;;AAMO,IAAM,YAAN,MAAMA,WAAS;EAGlB,YAAmB,QAAuB,SAAsB;AAA7C,SAAA,SAAA;AAAuB,SAAA,UAAA;AAFnC,SAAA,UAAU,IAAI,SAAQ;EAEuC;EAEpE,YAAY,OAA+B,OAA0B;AACjE,SAAK,UAAU,IAAI,SAAQ;AAC3B,SAAK,UAAU,MAAM;AACrB,SAAK,QAAQ,eAAe,KAAK,MAAK;AAClC,aAAO,WAAW,MAAK;AACnB,YAAI,KAAK,QAAQ,IAAI,UAAU,QAAQ,KAAK,KAAK,QAAQ,QAAQ,SAAS,GAAG;AACzE,cAAI,MAAM,KAAK,UAAU;AACrB,gBAAI,KAAK,QAAQ,QAAQ,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,MAAM;AAC9D,mBAAK,QAAQ,QAAQ,IAAI;YAC7B,OAAO;AACH,mBAAK,QAAQ,QAAQ,KAAK;YAC9B;UACJ,OAAO;AACH,iBAAK,QAAQ,QAAQ,IAAI;UAC7B;QACJ,OACK;AACD,eAAK,QAAQ,QAAQ,KAAK;AAC1B,eAAK,QAAQ,gBAAgB,KAAK,OAAO;QAC7C;MACJ,GAAG,EAAE;IACT,GAAG,MAAK;AACJ,WAAK,QAAQ,QAAQ,KAAK;AAC1B,WAAK,QAAQ,gBAAgB,KAAK,OAAO;IAC7C,CAAC;AACD,WAAO,KAAK,QAAQ;EACxB;;;;;;;;AA/BS,YAAS,WAAA;EADrB,WAAU;GACE,SAAS;AAkCtB,IAAM,WAAN,MAAc;EAMV,cAAA;AACI,SAAK,UAAU,IAAI,QAAW,CAAC,SAAS,WAAU;AAC9C,WAAK,UAAU;AACf,WAAK,SAAS;IAClB,CAAC;EACL;;",
  "names": ["AuthGuard"]
}
