{
  "version": 3,
  "sources": ["angular:jit:template:file:src\\app\\admin_setting\\mailsetting\\outgoing_server.html", "src/app/admin_setting/mailsetting/outgoing_server.ts", "src/app/admin_setting/mailsetting/mailsetting.module.ts"],
  "sourcesContent": ["\uFEFF\r\n<div class=\"main-panel\" style=\"width:100%;\">\r\n    <div class=\"row breadcrumb\">\r\n        <div class=\"col-12 col-md-6 title\">{{'lblOutgoingEmailServer'| translate:service.CL}}</div>\r\n        <div class=\"col-12 col-md-6\">\r\n            <a class=\"link\" routerLink=\"/\">{{'lblHome'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <a class=\"link\" routerLink=\"/admin\">{{'lblAdminSetting'| translate:service.CL}}</a> <i class=\"fa fa-angle-double-right\"></i>\r\n            <span>{{'lblOutgoingEmailServer'| translate:service.CL}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 stretch-card\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <form [formGroup]=\"OutgoingEmail_ServerForm\" (ngSubmit)=\"OutgoingEmail_ServerForm.valid && SaveOutgoing_Server()\" #f=\"ngForm\" novalidate>\r\n                            <div class=\"card-title\">\r\n                                <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n                                <a class=\"btn btn-sm btn-secondary\" routerLink=\"/admin\"><i class=\"fa fa-times mr-1\"></i>{{'btnCancel'| translate:service.CL}}</a>\r\n                                <a class=\"btn btn-sm btn-info\" (click)=\"TestOutgoing_Server();\"><i class=\"fa fa-check mr-1\"></i>{{'btnTestConnection'| translate:service.CL}}</a>\r\n                            </div>\r\n                            <div class=\"modal-body1\">\r\n                                <div class=\"form-box row\">\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\" [ngClass]=\"{ 'has-error': f.submitted && !OutgoingEmail_ServerForm.controls.host.valid }\">\r\n                                        <label>{{'lblServerName'| translate:service.CL}}</label>\r\n                                        <input type=\"text\" class=\"form-control col-md-10\" formControlName=\"host\" placeholder=\"Enter Server Name\" />\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\" [ngClass]=\"{ 'has-error': f.submitted && !OutgoingEmail_ServerForm.controls.port.valid }\">\r\n                                        <label>{{'lblPort'| translate:service.CL}}</label>\r\n                                        <input type=\"text\" number-only class=\"form-control col-md-10\" formControlName=\"port\" placeholder=\"Enter Port\" />\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\" [ngClass]=\"{ 'has-error': f.submitted && !OutgoingEmail_ServerForm.controls.userName.valid }\">\r\n                                        <label>{{'lblUsername'| translate:service.CL}}</label>\r\n                                        <input type=\"text\" class=\"form-control col-md-10\" formControlName=\"userName\" placeholder=\"Enter Username\" />\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\" [ngClass]=\"{ 'has-error': f.submitted && !OutgoingEmail_ServerForm.controls.password.valid }\">\r\n                                        <label>{{'lblPassword'| translate:service.CL}}</label>\r\n                                        <input type=\"password\" class=\"form-control col-md-10\" formControlName=\"password\" placeholder=\"Enter Password\" />\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                                        <div class=\"custom-control custom-checkbox\">\r\n                                            <input id=\"frmEnableSsl\" type=\"checkbox\" formControlName=\"enableSsl\" class=\"custom-control-input\">\r\n                                            <label class=\"custom-control-label\" for=\"frmEnableSsl\">{{'lblEnableSsl'| translate:service.CL}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                                        <div class=\"custom-control custom-checkbox\">\r\n                                            <input id=\"frmDefaultCredentials\" type=\"checkbox\" formControlName=\"defaultCredentials\" class=\"custom-control-input\">\r\n                                            <label class=\"custom-control-label\" for=\"frmDefaultCredentials\">{{'lblDefaultCredentials'| translate:service.CL}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                                        <label>{{'lblFromEmail'| translate:service.CL}}</label>\r\n                                        <input type=\"text\" class=\"form-control col-md-10\" formControlName=\"fromEmail\" placeholder=\"Enter From Email\" />\r\n                                    </div>\r\n                                    <div class=\"col-12 col-sm-12 col-md-6 form-group\">\r\n                                        <label>{{'lblFromEmailAlias'| translate:service.CL}}</label>\r\n                                        <input type=\"text\" class=\"form-control col-md-10\" formControlName=\"fromEmailAlias\" placeholder=\"Enter From Email Alias\" />\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"modal-footer form-btn mt-4 pb-0 prl-0\">\r\n                                <button type=\"submit\" class=\"btn btn-sm btn-teal\"><i class=\"fa fa-save mr-1\"></i>{{'btnSave'| translate:service.CL}}</button>\r\n                                <a class=\"btn btn-sm btn-secondary\" routerLink=\"/admin\"><i class=\"fa fa-times mr-1\"></i>{{'btnCancel'| translate:service.CL}}</a>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n</div>", "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { SystemService } from '../../shared/SystemService';\r\nimport { KeyValueString } from '../../shared/common_model';\r\nimport { AlertType } from '../../shared/common_model';\r\n\r\n\r\n@Component({\r\n    templateUrl: './outgoing_server.html'\r\n})\r\n\r\nexport class Outgoing_ServerComponent {\r\n    isLoading = false;\r\n    public LanguageList: Array<KeyValueString> = [];\r\n    constructor(public fb: UntypedFormBuilder, public service: SystemService, public router: Router) {\r\n        this.service.GoTo_ScrollTop(window);\r\n\r\n        this.initForm();\r\n    }\r\n    ngOnInit() {\r\n        this.bindData();\r\n    }\r\n\r\n    //Add/Edit \r\n    OutgoingEmail_ServerForm: UntypedFormGroup;\r\n    initForm() {\r\n        this.OutgoingEmail_ServerForm = this.fb.group({\r\n            host: [\"\", Validators.required],\r\n            userName: [\"\", Validators.required],\r\n            password: [\"\", Validators.required],\r\n            port: [\"\", Validators.required],\r\n            enableSsl: [false],\r\n            defaultCredentials: [false],\r\n            fromEmail: [\"\"],\r\n            fromEmailAlias: [\"\"]\r\n        });\r\n    }\r\n    async bindData() {\r\n        try {\r\n            let res = await this.service.Data.ExecuteAPI_Post<any>(\"Admin/Get_Outgoing_Server\");\r\n            if (res) {\r\n                this.OutgoingEmail_ServerForm.patchValue(res);\r\n\r\n                //This condition only for demo version\r\n                if (this.service.Account.Is_DemoVersion) {\r\n                    this.OutgoingEmail_ServerForm.controls[\"password\"].setValue(\".......\");\r\n                }\r\n            }\r\n        } catch (e) { }\r\n    }\r\n\r\n    async SaveOutgoing_Server() {\r\n        try {\r\n            if (!this.service.Account.Is_DemoVersion) {//This condition only for demo version\r\n                this.service.App.ShowLoader = true;\r\n                let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Update_Outgoing_Server\", this.OutgoingEmail_ServerForm.getRawValue());\r\n                if (res > 0) {\r\n                    this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgOutgoingEmailServerUpdated\"));\r\n                }\r\n                else {\r\n                    this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgError\"));\r\n                }\r\n                this.service.App.ShowLoader = false;\r\n            }\r\n            else {\r\n                this.service.showMessage(AlertType.Error, \"This features is not enable for demo version.\");\r\n            }\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n    async TestOutgoing_Server() {\r\n        try {\r\n            this.service.App.ShowLoader = true;\r\n            let res = await this.service.Data.ExecuteAPI_Post<number>(\"Admin/Test_Outgoing_Server\", this.OutgoingEmail_ServerForm.getRawValue());\r\n            if (res > 0) {\r\n                this.service.showMessage(AlertType.Success, this.service.Translator.instant(\"msgOutgoingEmailServerConnectionSuccess\"));\r\n            }\r\n            else {\r\n                this.service.showMessage(AlertType.Error, this.service.Translator.instant(\"msgOutgoingEmailServerConnectionFailed\"));\r\n            }\r\n            this.service.App.ShowLoader = false;\r\n        } catch (e) {\r\n            this.service.App.ShowLoader = false;\r\n        }\r\n    }\r\n\r\n}", "\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule, UpperCasePipe } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\nimport { Outgoing_ServerComponent } from './outgoing_server';\r\n\r\nconst routes: Routes = [\r\n    { path: 'outgoing_server', component: Outgoing_ServerComponent }, \r\n];\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes), CommonModule, SharedModule],\r\n    declarations: [Outgoing_ServerComponent],\r\n\r\n})\r\n\r\nexport class MailSettingModule {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
  "mappings": "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",
  "names": ["Outgoing_ServerComponent", "MailSettingModule"]
}
